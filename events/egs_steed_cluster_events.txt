namespace = egs_hexagon
@searchDistance1 = 100
country_event = {
	id = egs_hexagon.1
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		#compatability with extragalatic clusters
		set_global_flag = extragalactic_2_spawned
		set_spawn_system_batch = begin
		# No scope puts our relative coordinate as the galatic centre
		no_scope = {
			#
			# ROOT
			#
			spawn_system = {
				min_distance >= 515
				max_distance <= 516
				min_orientation_angle = 90
				max_orientation_angle = 100
				initializer = egs_apprentice_cluster_initializer
			}
		}
		#
		# STAR 2
		#
		# create the star
		random_system = {
			limit = {
				has_star_flag = egs_init_system
			}
			#also set the targets for the first star
			save_event_target_as = egs_cluster_root
			save_event_target_as = egs_cluster_01
			spawn_system = {
				min_distance >= 20
					max_distance <= 22
					min_orientation_angle = 260
					max_orientation_angle = 265
				initializer = egs_special_init_09				# pulsar
			}
		}
		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:egs_cluster_01
					max_distance <= @searchDistance1
				}
				NOT = {
					has_star_flag = egs_cluster
				}
			}
			save_event_target_as = egs_cluster_02
			set_star_flag = egs_cluster
			set_star_flag = egs_2
		}

		
		#
		# STAR 3
		#
		# create the star
		event_target:egs_cluster_01 = {
			spawn_system = {
				min_distance >= 20
					max_distance <= 22
					min_orientation_angle = 181
					max_orientation_angle = 185
				initializer = basic_init_04
			}
		}
		
		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:egs_cluster_01
					max_distance <= @searchDistance1
				}
				NOT = {
					has_star_flag = egs_cluster
				}
			}
			save_event_target_as = egs_cluster_03
			set_star_flag = egs_cluster
			set_star_flag = egs_3
			set_star_flag = egs_habitable_spawn
		}
		#
		# STAR 4
		#
		# create the star
		if = {
			limit = {
				has_country_flag = EGS_KERBAL_YES
			}
			event_target:egs_cluster_01 = {
				spawn_system = {
					min_distance >= 15
					max_distance <= 17
					min_orientation_angle = 150
					max_orientation_angle = 155
					initializer = egs_kerbal_space_program
				}
			}
		}
		else = {
			event_target:egs_cluster_01 = {
				spawn_system = {
					min_distance >= 15
					max_distance <= 17
					min_orientation_angle = 150
					max_orientation_angle = 155
					initializer = basic_init_05
				}
			}
		}
		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:egs_cluster_01
					max_distance <= @searchDistance1
				}
				NOT = {
					has_star_flag = egs_cluster
				}
			}
			save_event_target_as = egs_cluster_04
			set_star_flag = egs_cluster
			set_star_flag = egs_4
		}
		#
		# STAR 5
		#
		# create the star
		event_target:egs_cluster_01 = {
			spawn_system = {
				min_distance >= 30
					max_distance <= 35
					min_orientation_angle = 34
					max_orientation_angle = 37
				initializer = egs_special_init_08				#neutron
			}
		}
		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:egs_cluster_01
					max_distance <= @searchDistance1
				}
				NOT = {
					has_star_flag = egs_cluster
				}
			}
			save_event_target_as = egs_cluster_05
			set_star_flag = egs_cluster
			set_star_flag = egs_5
		}
    
    
    # The below stars are created relative to other stars.
		# Technically they could all have been done in the above blocks
		# But I find it easier to read this way
		#
		# STAR 6
		#
		# create the star
		event_target:egs_cluster_04 = {
			spawn_system = {
				min_distance >= 18
				max_distance <= 20
				min_orientation_angle = 15
				max_orientation_angle = 17
				initializer = asteroid_init_01
			}
		}
		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:egs_cluster_04
					max_distance <= @searchDistance1
				}
				NOT = {
					has_star_flag = egs_cluster
				}
			}
			save_event_target_as = egs_cluster_06
			set_star_flag = egs_cluster
			set_star_flag = egs_6
		}
		#
		# STAR 7
		#
		# create the star
		if = {
			limit = {
				num_guaranteed_colonies >= 2
			}
			event_target:egs_cluster_03 = {
				spawn_system = {
					min_distance >= 28
				max_distance <= 30
				min_orientation_angle = 190
				max_orientation_angle = 195
					initializer = neighbor_t2_second_colony
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_GIGA_YES
			}
			event_target:egs_cluster_03 = {
				spawn_system = {
					min_distance >= 28
				max_distance <= 30
				min_orientation_angle = 190
				max_orientation_angle = 195
					initializer = special_init_01					# black hole
				}
			}
		}
		else = {
			event_target:egs_cluster_03 = {
				spawn_system = {
					min_distance >= 28
				max_distance <= 30
				min_orientation_angle = 190
				max_orientation_angle = 195
					initializer = trinary_init_02
				}
			}
		}

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:egs_cluster_03
					max_distance <= @searchDistance1
				}
				NOT = {
					has_star_flag = egs_cluster
				}
			}
			save_event_target_as = egs_cluster_07
			set_star_flag = egs_cluster
			set_star_flag = egs_7
		}
		
		#
		# STAR 8
		#
		# create the star
		event_target:egs_cluster_02 = {
			spawn_system = {
				min_distance >= 21
				max_distance <= 23
				min_orientation_angle = 250
				max_orientation_angle = 255
				initializer = egs_sca_init				#class A star
			}
		}
		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:egs_cluster_02
					max_distance <= @searchDistance1
				}
				NOT = {
					has_star_flag = egs_cluster
				}
			}
			save_event_target_as = egs_cluster_08
			set_star_flag = egs_cluster
			set_star_flag = egs_8
		}
		    
		# clear all hyperlanes to and within the cluster
		every_system = {
			limit = {
				has_star_flag = egs_cluster
			}
			isolate_system = yes
		}
    
    
		#create the cluster hyperlanes
			add_hyperlane = {
				from = event_target:steed_cluster_01
				to = event_target:steed_cluster_02
			}

			add_hyperlane = {
				from = event_target:steed_cluster_01
				to = event_target:steed_cluster_03
			}

			add_hyperlane = {
				from = event_target:steed_cluster_01
				to = event_target:steed_cluster_04
			}
		}
		event_target:steed_cluster_01 = {
			add_hyperlane = {
				from = event_target:steed_cluster_01
				to = event_target:steed_cluster_05
			}
		}
		event_target:steed_cluster_02 = {
			add_hyperlane = {
				from = event_target:steed_cluster_02
				to = event_target:steed_cluster_03
			}
		
			add_hyperlane = {
				from = event_target:steed_cluster_03
				to = event_target:steed_cluster_07
			}
		
			add_hyperlane = {
				from = event_target:steed_cluster_02
				to = event_target:steed_cluster_08
			}
		
		
			add_hyperlane = {
				from = event_target:steed_cluster_04
				to = event_target:steed_cluster_06
			}
		
    
		set_spawn_system_batch = end
		country_event = {
			id = egs_colony.1
		}
	}
}
