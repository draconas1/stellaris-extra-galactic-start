namespace = egs_apprentice
@searchDistance1 = 100

country_event = {
	id = egs_apprentice.1
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		set_spawn_system_batch = begin
		no_scope = {
			#
			# ROOT
			#
			spawn_system = {
				min_distance >=  544
				max_distance <=  549
				min_orientation_angle = 314
				max_orientation_angle = 315
				initializer = egs_apprentice_cluster_initializer
			}
		}

		#
		# STAR 2
		#

		# create the star
		random_system = {
			limit = { has_star_flag = egs_init_system }
			#also set the targets for the first star
			save_event_target_as = egs_cluster_root
			save_event_target_as = apprentice_cluster_root
			save_event_target_as = apprentice_cluster_01
			spawn_system = {
				min_distance >= 37
				max_distance <= 41
				min_orientation_angle = 277
				max_orientation_angle = 283
				initializer = egs_special_init_09 # pulsar
			}
		}

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_root
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_02
			set_star_flag = egs_cluster
			set_star_flag = egs_2 
		}

		#
		# STAR 3
		#
		# create the star
		if = {
			limit = {
				num_guaranteed_colonies >= 2
			}
			random_system = {
				limit = { has_star_flag = egs_init_system }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 200
					max_orientation_angle = 205
					initializer = neighbor_t2_second_colony
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_GIGA_YES
			}
			random_system = {
				limit = { has_star_flag = egs_init_system }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 200
					max_orientation_angle = 205
					initializer = special_init_01 # black hole
				}
			}
		}
		else = {
			random_system = {
				limit = { has_star_flag = egs_init_system }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 200
					max_orientation_angle = 205
					initializer = trinary_init_02
				}
			}
		}

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_root
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_03
			set_star_flag = egs_cluster
			set_star_flag = egs_3
			set_star_flag = egs_habitable_spawn
		}

		#
		# STAR 4
		#

		# create the star
		if = {
			limit = {
				has_country_flag = EGS_KERBAL_YES
			}
			random_system = {
				limit = { has_star_flag = egs_init_system }
				spawn_system = {
					min_distance >= 26
					max_distance <= 31
					min_orientation_angle = 162
					max_orientation_angle = 168
					initializer = egs_kerbal_space_program
				}
			}
		}
		else = {
			random_system = {
				limit = { has_star_flag = egs_init_system }
				spawn_system = {
					min_distance >= 26
					max_distance <= 31
					min_orientation_angle = 162
					max_orientation_angle = 168
					initializer = basic_init_05
				}
			}
		}
		
		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_root
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_04
			set_star_flag = egs_cluster
			set_star_flag = egs_4
		}

		#
		# STAR 5
		#

		# create the star
		random_system = {
			limit = { has_star_flag = egs_init_system }
			spawn_system = {
				min_distance >= 22
				max_distance <= 25
				min_orientation_angle = 105
				max_orientation_angle = 110
				initializer = egs_special_init_08 #neutron
			}
		}

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_root
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_05
			set_star_flag = egs_cluster
			set_star_flag = egs_5
		}

		
		#
		# STAR 6
		#

		# create the star
		random_system = {
			limit = { has_star_flag = egs_init_system }
			spawn_system = {
				min_distance >= 27
				max_distance <= 32
				min_orientation_angle = 45
				max_orientation_angle = 50
				initializer = asteroid_init_01 
			}
		}

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_root
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_06
			set_star_flag = egs_cluster
			set_star_flag = egs_6
		}

		#
		# STAR 7
		#

		# create the star
		random_system = {
			limit = { has_star_flag = egs_init_system }
			spawn_system = {
				min_distance >= 22
				max_distance <= 27
				min_orientation_angle = 5
				max_orientation_angle = 9
				initializer = basic_init_04
			}
		}

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_root
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_07
			set_star_flag = egs_cluster
			set_star_flag = egs_7
		}


		# The below stars are created relative to other stars.
		# Technically they could all have been done in the above blocks
		# But I find it easier to read this way

		#
		# STAR 8
		#

		# create the star
		random_system = {
			limit = { has_star_flag = egs_5 }
			spawn_system = {
				min_distance >= 40
				max_distance <= 43
				min_orientation_angle = 96
				max_orientation_angle = 99
				initializer =  egs_sca_init #class A star
			}
		}

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_05
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_08
			set_star_flag = egs_cluster
			set_star_flag = egs_8
		}

		#
		# STAR 9
		#

		# create the star
		if = {
			limit = {
				has_country_flag = EGS_START_SOL 
			}
			random_system = {
				limit = { has_star_flag = egs_6 }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = sol_system_initializer
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_DENEB 
			}
			random_system = {
				limit = { has_star_flag = egs_6 }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = deneb_system
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_RINGWORLD 
			}
			random_system = {
				limit = { has_star_flag = egs_6 }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = egs_ringworld_init
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_RANDOM_TRINARY 
			}
			random_system = {
				limit = { has_star_flag = egs_6 }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = random_empire_init_05
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_START_RANDOM_BINARY 
			}
			random_system = {
				limit = { has_star_flag = egs_6 }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = random_empire_init_06
				}
			}
		}
		else = {
			random_system = {
				limit = { has_star_flag = egs_6 }
				spawn_system = {
					min_distance >= 25
					max_distance <= 28
					min_orientation_angle = 44
					max_orientation_angle = 49
					initializer = random_empire_init_01
				}
			}
		}
		

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_06
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_09
			set_star_flag = egs_cluster
			set_star_flag = egs_9
			set_star_flag = egs_empire_home
		}

		#
		# STAR 10
		#

		# create the star
		if = {
			limit = {
				num_guaranteed_colonies >= 1
			}
			random_system = {
				limit = { has_star_flag = egs_7 }
				spawn_system = {
					min_distance >= 29
					max_distance <= 33
					min_orientation_angle = 13
					max_orientation_angle = 16
					initializer = neighbor_t1_first_colony
				}
			}
		}
		else_if = {
			limit = {
				has_country_flag = EGS_GIGA_YES
			}
			random_system = {
				limit = { has_star_flag = egs_7 }
				spawn_system = {
					min_distance >= 29
					max_distance <= 33
					min_orientation_angle = 13
					max_orientation_angle = 16
					initializer = basic_init_06
				}
			}
		}
		else = {
			random_system = {
				limit = { has_star_flag = egs_7 }
				spawn_system = {
					min_distance >= 29
					max_distance <= 33
					min_orientation_angle = 13
					max_orientation_angle = 16
					initializer = binary_init_02
				}
			}
		}		

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_07
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_10
			set_star_flag = egs_cluster
			set_star_flag = egs_10
			set_star_flag = egs_habitable_spawn
		}

		#
		# STAR 11
		#

		# create the star
		random_system = {
			limit = { has_star_flag = egs_9 }
			spawn_system = {
				min_distance >= 24
				max_distance <= 29
				min_orientation_angle = 66
				max_orientation_angle = 71
				initializer = basic_init_06
			}
		}

		# find the star
		random_system = {
			limit = {
				distance = {
					source = event_target:apprentice_cluster_09
					max_distance <= @searchDistance1
				}
				NOT = { has_star_flag = egs_cluster }
			}
			save_event_target_as = apprentice_cluster_11
			set_star_flag = egs_cluster
			set_star_flag = egs_11
		}

		# clear all hyperlanes to and within the cluster
		every_system = {
			limit = { has_star_flag = egs_cluster }
			isolate_system = yes
		}

		#create the cluster hyperlanes
		event_target:apprentice_cluster_01 = {
			add_hyperlane = {
				from = event_target:apprentice_cluster_01
				to = event_target:apprentice_cluster_02
			}
			add_hyperlane = {
				from = event_target:apprentice_cluster_01
				to = event_target:apprentice_cluster_03
			}
			add_hyperlane = {
				from = event_target:apprentice_cluster_01
				to = event_target:apprentice_cluster_04
			}
			add_hyperlane = {
				from = event_target:apprentice_cluster_01
				to = event_target:apprentice_cluster_05
			}
			add_hyperlane = {
				from = event_target:apprentice_cluster_01
				to = event_target:apprentice_cluster_06
			}
			add_hyperlane = {
				from = event_target:apprentice_cluster_01
				to = event_target:apprentice_cluster_07
			}
		}
		event_target:apprentice_cluster_03 = {
			add_hyperlane = {
				from = event_target:apprentice_cluster_03
				to = event_target:apprentice_cluster_04
			}
		}
		event_target:apprentice_cluster_05 = {
			add_hyperlane = {
				from = event_target:apprentice_cluster_05
				to = event_target:apprentice_cluster_08
			}
		}
		event_target:apprentice_cluster_07 = {
			add_hyperlane = {
				from = event_target:apprentice_cluster_07
				to = event_target:apprentice_cluster_10
			}
		}
		event_target:apprentice_cluster_09 = {
			add_hyperlane = {
				from = event_target:apprentice_cluster_09
				to = event_target:apprentice_cluster_06
			}
			add_hyperlane = {
				from = event_target:apprentice_cluster_09
				to = event_target:apprentice_cluster_10
			}
			add_hyperlane = {
				from = event_target:apprentice_cluster_09
				to = event_target:apprentice_cluster_11
			}
		}

		set_spawn_system_batch = end


		country_event = { id = egs_colony.1 }


	}
}